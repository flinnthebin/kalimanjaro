#!/usr/bin/env bash
# cleanup
# Uninstaller for tools installed by srcbuild recipes from /usr/local.
# Usage:
#   ./cleanup                # clean all known recipes
#   ./cleanup amap           # clean only amap
#   ./cleanup 0trace amap    # clean 0trace, amap

set -Eeuo pipefail
IFS=$'\n\t'

# Install prefix (default /usr/local). Can override via env or --prefix flag.
PREFIX="${PREFIX:-/usr/local}"
if [[ ${1:-} == "--prefix" && $# -ge 2 ]]; then
  PREFIX="$2"; shift 2
fi

# ---------- Helpers ----------
log()  { printf "\033[1;34m==>\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[!]\033[0m %s\n" "$*"; }
die()  { printf "\033[1;31m[xx]\033[0m %s\n" "$*" >&2; exit 1; }

with_sudo() { if [[ $EUID -ne 0 ]]; then sudo "$@"; else "$@"; fi; }

rm_if_exists() {
  # args: <path>...
  local p rc=0
  for p in "$@"; do
    if [[ -e "$p" || -L "$p" ]]; then
      with_sudo rm -f -- "$p" || rc=1
      log "removed: $p"
    fi
  done
  return $rc
}

rmdir_safe() {
  # args: <dir>...
  local d
  for d in "$@"; do
    with_sudo rmdir --ignore-fail-on-non-empty -- "$d" 2>/dev/null || true
  done
}

refresh_mandb() {
  if command -v mandb >/dev/null 2>&1; then
    log "refreshing man-db"
    with_sudo mandb >/dev/null 2>&1 || warn "mandb refresh failed"
  fi
}

# ---------- Dispatch helpers ----------
norm_recipe() {
  local n="${1,,}"
  n="${n//-/_}"
  printf '%s\n' "$n"
}

has_clean() {
  local fn="clean_$(norm_recipe "$1")"
  declare -F "$fn" >/dev/null
}

run_clean() {
  local fn="clean_$(norm_recipe "$1")"
  if declare -F "$fn" >/dev/null; then
    "$fn"
  else
    die "Unknown recipe: $1 (no function $fn)"
  fi
}

# List all recipes by looking at declared functions named clean_*
known_recipes() {
  declare -F \
  | awk '{print $3}' \
  | sed -n 's/^clean_//p' \
  | sort -u
}

# Clean all (alphabetical)
run_clean_all() {
  local r
  while IFS= read -r r; do
    run_clean "$r"
  done < <(known_recipes)
}

# ---------- Clean recipes ----------
clean_0trace() {
  log "[0trace] removing installed files"
  rm_if_exists \
    "$PREFIX/bin/0trace" \
    "$PREFIX/libexec/0trace/sendprobe"
  rmdir_safe "$PREFIX/libexec/0trace"
}

clean_amap() {
  log "[amap] removing installed files"
  rm_if_exists \
    "$PREFIX/bin/amap" \
    "$PREFIX/bin/amapcrap" \
    "$PREFIX/share/amap/appdefs.resp" \
    "$PREFIX/share/amap/appdefs.trig" \
    "$PREFIX/share/amap/appdefs.rpc" \
    "$PREFIX/share/man/man1/amap.1" \
    "$PREFIX/share/man/man1/amapcrap.1"
  rmdir_safe "$PREFIX/share/amap"
}

clean_apache_users() {
  log "[apache-users] removing installed files"
  rm_if_exists "$PREFIX/bin/apache-users"
}

clean_apktool() {
  log "[apktool] removing installed files"
  rm_if_exists "$PREFIX/bin/apktool" "$PREFIX/bin/apktool.jar"
}

clean_apple_bleee() {
  log "[apple-bleee] removing installed files"
  rm_if_exists \
    "$PREFIX/bin/ble-read-state" \
    "$PREFIX/bin/airdrop-leak" \
    "$PREFIX/bin/adv-wifi" \
    "$PREFIX/bin/adv-airpods" \
    "$PREFIX/bin/owl"
  # just in case upstream ever installs libs/headers
  rm_if_exists "$PREFIX/lib/libawdl.a" "$PREFIX/lib/libradiotap.a"
  with_sudo rm -rf "$PREFIX/share/apple-bleee" 2>/dev/null || true
  log "[apple-bleee] cleanup complete"
}

clean_arkime() {
  log "[arkime] stopping & disabling services"
  with_sudo systemctl disable --now arkimecapture arkimeviewer 2>/dev/null || true

  # Prefer clean package removal on Arch/Manjaro
  if command -v pacman >/dev/null 2>&1 && pacman -Qq arkime &>/dev/null; then
    log "[arkime] removing pacman package"
    with_sudo pacman -Rns --noconfirm arkime >/dev/null 2>&1 || warn "pacman removal failed; continuing with manual cleanup"
  fi

  log "[arkime] removing installed files"
  # Logrotate config
  rm_if_exists "/etc/logrotate.d/arkime"

  # Systemd unit files (package usually installs under /usr/lib)
  rm_if_exists \
    "/usr/lib/systemd/system/arkimecapture.service" \
    "/usr/lib/systemd/system/arkimeviewer.service" \
    "/etc/systemd/system/arkimecapture.service" \
    "/etc/systemd/system/arkimeviewer.service"

  # Remove any dangling symlinks from wants/
  with_sudo rm -f /etc/systemd/system/multi-user.target.wants/arkimecapture.service 2>/dev/null || true
  with_sudo rm -f /etc/systemd/system/multi-user.target.wants/arkimeviewer.service 2>/dev/null || true

  # Main install tree
  with_sudo rm -rf "/opt/arkime" 2>/dev/null || true

  # Reload systemd so unit removals take effect
  with_sudo systemctl daemon-reload 2>/dev/null || true

  log "[arkime] cleanup complete"
}

# ---------- Entry ----------
main() {
  # Optional flags (prefix already handled above if you added it)
  case "${1:-}" in
    -l|--list) known_recipes; exit 0 ;;
    -a|--all)  shift; run_clean_all; refresh_mandb; log "Cleanup complete."; exit 0 ;;
  esac

  if (( $# == 0 )); then
    run_clean_all
  else
    local n
    for n in "$@"; do
      run_clean "$n"
    done
  fi
  refresh_mandb
  log "Cleanup complete."
}

main "$@"
