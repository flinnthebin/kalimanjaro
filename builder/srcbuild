#!/usr/bin/env bash
# A tiny framework for building old tools from source cleanly on Arch/Manjaro.
# Usage:
#   ./build.sh [--debug] <recipe> [<recipe> ...]
# Examples:
#   ./build.sh amap
#   ./build.sh --debug apple_bleee 0trace

set -Eeuo pipefail
IFS=$'\n\t'

# ---------- Global flags / arg parsing ----------
DEBUG=0
RECIPES=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    --debug) DEBUG=1; shift ;;
    --) shift; break ;;              # allow: ./build.sh -- <anything else>
    -h|--help)
      cat <<EOF
Usage: $0 [--debug] <recipe> [<recipe> ...]
  --debug     Show full command output (quiet_run is disabled)
EOF
      exit 0
      ;;
    *) RECIPES+=("$1"); shift ;;
  esac
done
# Allow DEBUG from env too: DEBUG=1 ./build.sh amap

# ---------- Helpers ----------
log()  { printf "\033[1;34m==>\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[!]\033[0m %s\n" "$*"; }
die()  { printf "\033[1;31m[xx]\033[0m %s\n" "$*" >&2; exit 1; }

# quiet_run: suppress output unless debugging
quiet_run() {
  if (( DEBUG )); then
    "$@"
  else
    "$@" >/dev/null 2>&1
  fi
}

require_cmd() { command -v "$1" &>/dev/null || die "Missing required command: $1"; }

with_sudo() { if [[ $EUID -ne 0 ]]; then sudo "$@"; else "$@"; fi; }

ensure_pkgs() {
  local pkgs=("$@")
  [[ ${#pkgs[@]} -eq 0 ]] && return 0
  require_cmd pacman
  quiet_run with_sudo pacman -S --needed --noconfirm "${pkgs[@]}"
}

mkwork() {
  local base="${1:-/tmp}"
  local d
  d="$(mktemp -d -p "$base" srcbuild-XXXXXX)"
  echo "$d"
}

clean_env_configure() {
  # args: <dir> [extra env] -- <configure args...>
  local dir=$1; shift
  (
    cd "$dir"
    local envs=() args=() seen_sep=0
    for x in "$@"; do
      if [[ $x == '--' && $seen_sep -eq 0 ]]; then seen_sep=1; continue; fi
      (( seen_sep == 0 )) && envs+=("$x") || args+=("$x")
    done
    CONFIG_SHELL=/bin/bash env -i PATH="/usr/bin:/bin" CC=/usr/bin/gcc CXX=/usr/bin/g++ CFLAGS="-O2" LDFLAGS="" \
      "${envs[@]}" ./configure "${args[@]}"
  )
}

# ---------- Framework runner ----------
run_recipe() {
  local name="$1"; shift || true
  (
    set -Eeuo pipefail
    # If debugging, show shell trace inside recipe subshell only
    (( DEBUG )) && set -x

    local work success=0
    work="$(mkwork)"
    log "Work dir: $work"
    trap '(( success )) && rm -rf "$work" || echo "Left work dir for debug: $work"' EXIT

    # Deps
    local dep_fn="pkg_${name}_deps"
    if declare -F "$dep_fn" >/dev/null; then
      mapfile -t deps < <("$dep_fn")
      [[ ${#deps[@]} -gt 0 ]] && { log "Installing deps: ${deps[*]}"; ensure_pkgs "${deps[@]}"; }
    fi

    # Fetch / Build / Install
    local srcdir="$work/$name-src"
    mkdir -p "$srcdir"
    "fetch_${name}" "$srcdir"
    "build_${name}" "$srcdir"
    "install_${name}" "$srcdir"

    success=1
    log "Done: $name"
  )
}

# =========================
# Recipes
# =========================

# ---- 0trace ----
pkg_0trace_deps() { printf '%s\n' gcc make libcap git; }

fetch_0trace() { # args: <dst>
  local dst="$1"
  require_cmd git
  log "[0trace] fetching sources"
  quiet_run git clone --depth=1 https://gitlab.com/kalilinux/packages/0trace.git "$dst"
}

build_0trace() { # args: <src>
  local src="$1"
  log "[0trace] compiling sendprobe"
  ( cd "$src"
    quiet_run gcc -O2 -Wall -o sendprobe sendprobe.c
    # Patch script to look in /usr/local/libexec
    sed -E 's#\./sendprobe#${PROBE:-/usr/local/libexec/0trace/sendprobe}#g' 0trace.sh > 0trace.patched
  )
}

install_0trace() { # args: <src>
  local src="$1"
  log "[0trace] installing"
  quiet_run with_sudo install -Dm755 "$src/sendprobe" /usr/local/libexec/0trace/sendprobe
  quiet_run with_sudo install -Dm755 "$src/0trace.patched" /usr/local/bin/0trace
  quiet_run with_sudo setcap cap_net_raw+ep /usr/local/libexec/0trace/sendprobe || warn "setcap failed; run 0trace with sudo"
  log "[0trace] installed to /usr/local/bin/0trace"
}

# ---- amap 5.4 ----
pkg_amap_deps() { printf '%s\n' base-devel openssl pcre curl; }

fetch_amap() { # args: <dst>
  local dst="$1"
  require_cmd curl
  log "[amap] discovering latest version"
  local baseurl="https://github.com/hackerschoice/THC-Archive/raw/master/Tools"
  local ver
  ver="$(curl -fsSL "https://github.com/hackerschoice/THC-Archive/tree/master/Tools" \
          | grep -oE 'amap-[0-9]+\.[0-9]+\.tar\.gz' \
          | sed -E 's/amap-([0-9]+\.[0-9]+)\.tar\.gz/\1/' \
          | sort -V \
          | tail -1)" || true
  [[ -n "$ver" ]] || die "[amap] could not detect latest version"

  log "[amap] downloading v$ver"
  curl -fsSL "${baseurl}/amap-${ver}.tar.gz" -o "$dst/amap.tar.gz"
  tar -C "$dst" -xf "$dst/amap.tar.gz"
  mv "$dst/amap-${ver}" "$dst/amap"
}

build_amap() { # args: <src>
  local src="$1"; src="$src/amap"
  log "[amap] attempting ancient configure (expected to fail)â€¦"
  set +e
  quiet_run clean_env_configure "$src" ac_cv_prog_cc_works=yes ac_cv_prog_cc_cross=no -- --prefix=/usr/local --with-ssl=/usr
  local st=$?
  set -e
  if (( st == 0 )); then
    log "[amap] building via make"
    ( cd "$src" && quiet_run make -j"$(nproc)" || true )
    # Some trees don't build amapcrap by default; ensure it exists
    if [[ ! -x "$src/amapcrap" && -f "$src/amapcrap.c" ]]; then
      log "[amap] make didn't produce amapcrap; building manually"
      ( cd "$src"
        quiet_run gcc -O2 -Wall -I. -o amapcrap amapcrap.c amap-lib.c -lpcre -lpcreposix -lssl -lcrypto
      )
    fi
  else
    log "[amap] configure failed; patching to use system PCRE and building directly"
    ( cd "$src"
      sed -i -E 's#"pcre-3\.9/pcre\.h"#<pcre.h>#' amap-inc.h || true
      sed -i -E 's#"pcre-3\.9/pcreposix\.h"#<pcreposix.h>#' amap-inc.h || true
      quiet_run gcc -O2 -Wall -I. -o amap amap.c amap-lib.c -lpcre -lpcreposix -lssl -lcrypto
      if [[ -f amapcrap.c ]]; then
        quiet_run gcc -O2 -Wall -I. -o amapcrap amapcrap.c amap-lib.c -lpcre -lpcreposix -lssl -lcrypto
      fi
      touch .direct-build # mark path taken for installer step
    )
  fi
}

install_amap() { # args: <src>
  local src="$1"; src="$src/amap"
  log "[amap] installing"
  if [[ -f "$src/.direct-build" ]]; then
    quiet_run with_sudo install -Dm755 "$src/amap" /usr/local/bin/amap
    [[ -x "$src/amapcrap" ]] && quiet_run with_sudo install -Dm755 "$src/amapcrap" /usr/local/bin/amapcrap
    quiet_run with_sudo install -Dm644 "$src/appdefs.resp" /usr/local/share/amap/appdefs.resp
    quiet_run with_sudo install -Dm644 "$src/appdefs.trig" /usr/local/share/amap/appdefs.trig
    quiet_run with_sudo install -Dm644 "$src/appdefs.rpc"  /usr/local/share/amap/appdefs.rpc
    quiet_run with_sudo install -Dm644 "$src/amap.1" /usr/local/share/man/man1/amap.1 || true
    # (amapcrap.1 rarely exists; install if it does)
    [[ -f "$src/amapcrap.1" ]] && quiet_run with_sudo install -Dm644 "$src/amapcrap.1" /usr/local/share/man/man1/amapcrap.1 || true
    command -v mandb >/dev/null && quiet_run with_sudo mandb || true
  else
    ( cd "$src" && quiet_run with_sudo make install || true )
    # Make sure amapcrap is installed even if "make install" skipped it
    [[ -x "$src/amapcrap" ]] && quiet_run with_sudo install -Dm755 "$src/amapcrap" /usr/local/bin/amapcrap
    [[ -f "$src/amapcrap.1" ]] && quiet_run with_sudo install -Dm644 "$src/amapcrap.1" /usr/local/share/man/man1/amapcrap.1 || true
    command -v mandb >/dev/null && quiet_run with_sudo mandb || true
  fi
  log "[amap] installed to /usr/local/bin/amap"
  [[ -x /usr/local/bin/amapcrap ]] && log "[amap] installed amapcrap to /usr/local/bin/amapcrap"
}

# ---- apache-users ----
pkg_apache_users_deps() {
  printf '%s\n' perl curl \
                 perl-parallel-forkmanager \
                 perl-libwww \
                 perl-io-socket-ip
  # optional: perl-io-all  (repo)  and perl-io-all-lwp (AUR)
}

fetch_apache-users() { # args: <dst>
  local dst="$1"
  require_cmd curl
  log "[apache-users] fetching apache2.pl"
  mkdir -p "$dst"
  curl -fsSL "https://raw.githubusercontent.com/CiscoCXSecurity/apache-users/master/apache2.pl" -o "$dst/apache2.pl"
}

build_apache-users() { # args: <src>
  local src="$1"
  log "[apache-users] no build step (perl script)"
  # normalize shebang to env perl
  sed -i '1s@^#!.*perl.*@#!/usr/bin/env perl@' "$src/apache2.pl"
  quiet_run chmod +x "$src/apache2.pl"
}

install_apache-users() { # args: <src>
  local src="$1"
  log "[apache-users] installing to /usr/local/bin/apache-users"
  quiet_run with_sudo install -Dm755 "$src/apache2.pl" /usr/local/bin/apache-users
  log "[apache-users] installed: /usr/local/bin/apache-users"
}

# ---- apktool ----
pkg_apktool_deps() { printf '%s\n' curl; }

fetch_apktool() { # args: <dst>
  local dst="$1"
  require_cmd curl
  require_cmd jq
  log "[apktool] fetching wrapper script"
  mkdir -p "$dst"
  curl -fsSL "https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool" \
    -o "$dst/apktool"

  log "[apktool] discovering latest jar from Bitbucket"
  local api="https://api.bitbucket.org/2.0/repositories/iBotPeaches/apktool/downloads?pagelen=50"
  local jar
  jar="$(curl -fsSL "$api" \
        | jq -r '.values[].name' \
        | grep -E '^apktool_[0-9.]+\.jar$' \
        | sort -V \
        | tail -1)" || true
  [[ -n "$jar" ]] || die "[apktool] could not detect latest jar"

  log "[apktool] fetching $jar"
  curl -fsSL "https://bitbucket.org/iBotPeaches/apktool/downloads/${jar}" -o "$dst/apktool.jar"
}
build_apktool() { # args: <src>
  local src="$1"
  log "[apktool] no build step (script + jar)"
  quiet_run chmod +x "$src/apktool"
}

install_apktool() { # args: <src>
  local src="$1"
  log "[apktool] installing"
  quiet_run with_sudo install -Dm755 "$src/apktool" /usr/local/bin/apktool
  quiet_run with_sudo install -Dm755 "$src/apktool.jar" /usr/local/bin/apktool.jar
  log "[apktool] installed: /usr/local/bin/apktool + apktool.jar"
}

# ---- apple-bleee (+ owl) ----
pkg_apple_bleee_deps() {
  printf '%s\n' git python python-pip base-devel cmake \
                 libpcap libnl libev bluez bluez-libs python-pybluez
}

fetch_apple_bleee() { # args: <dst>
  local dst="$1"
  require_cmd git
  log "[apple-bleee] fetching sources"
  mkdir -p "$dst"
  quiet_run git clone --depth=1 https://github.com/hexway/apple_bleee.git "$dst/apple_bleee"
  quiet_run git clone --depth=1 https://github.com/seemoo-lab/owl.git "$dst/owl"
  # init submodules for owl
  ( cd "$dst/owl" && quiet_run git submodule update --init )
}

patch_apple_bleee_pyfixes() {
  local root="$1"
  require_cmd find
  require_cmd sed
  require_cmd perl

  # Fix "is"/"is not" when used with numeric or empty-string literals
  #   (preserves 'is None' semantics)
  while IFS= read -r -d '' f; do
    sed -i -E \
      -e 's/\bis[[:space:]]+not[[:space:]]+(-?[0-9]+)/!= \1/g' \
      -e 's/\bis[[:space:]]+(-?[0-9]+)/== \1/g' \
      -e "s/\\bis[[:space:]]+not[[:space:]]+(''|\"\")/!= \\1/g" \
      -e "s/\\bis[[:space:]]+(''|\"\")/== \\1/g" \
      "$f"
  done < <(find "$root/npyscreen" -type f -name '*.py' -print0 2>/dev/null || true)

  # Make regex patterns raw if they contain backslashes:
  #   re.compile("...<backslash>...") -> re.compile(r"...")
  # (only touches the non-raw double-quoted form)
  find "$root" -type f -name '*.py' -print0 \
    | xargs -0 perl -0777 -pi -e 's/re\.compile\("((?:[^"\\]|\\.)*\\(?:[^"\\]|\\.)*)"\)/"re.compile(r\"$1\")"/g'
}

build_apple_bleee() { # args: <src>
  local src="$1"

  log "[apple-bleee] building owl (AWDL)"
  (
    cd "$src/owl"
    sed -i -E 's/^[[:space:]]*add_subdirectory\((googletest)\)/# \0/' CMakeLists.txt || true
    sed -i -E 's/^[[:space:]]*add_subdirectory\((tests)\)/# \0/' CMakeLists.txt || true
    mkdir -p build && cd build
    quiet_run cmake ..
    quiet_run make -j"$(nproc)" owl
    quiet_run with_sudo make install
  )

  log "[apple-bleee] preparing Python env"
  local share_dir="/usr/local/share/apple-bleee"
  local venv="$share_dir/.venv"
  local req_fixed="$src/apple_bleee/requirements.fixed.txt"

  # sanitize upstream requirements (pycrypto -> pycryptodome; drop pybluez since we use system)
  sed -E '
    s/^[[:space:]]*pycrypto[[:space:]]*$/pycryptodome/i;
    s/%[[:space:]]*$//;
    s/^[[:space:]]*pybluez([[:space:]]*(==[^[:space:]]+)?)?[[:space:]]*$/# pybluez (provided by system)/i
  ' "$src/apple_bleee/requirements.txt" > "$req_fixed"

  # fresh install path + sources
  quiet_run with_sudo rm -rf "$share_dir"
  quiet_run with_sudo mkdir -p "$share_dir"
  quiet_run with_sudo cp -a "$src/apple_bleee/." "$share_dir/"

  # --- NEW: patch legacy Python syntax to be Py3.13-happy ---
  log "[apple-bleee] patching legacy Python syntax"
  patch_apple_bleee_pyfixes "$share_dir"

  # venv using system site-packages (for python-pybluez)
  quiet_run with_sudo python -m venv --system-site-packages "$venv"
  quiet_run with_sudo "$venv/bin/pip" install --upgrade pip wheel
  quiet_run with_sudo "$venv/bin/pip" install -r "$req_fixed" || {
    warn "[apple-bleee] pip -r failed; retrying best-effort per package"
    while IFS= read -r pkg; do
      [[ -z "$pkg" || "$pkg" =~ ^# ]] && continue
      with_sudo "$venv/bin/pip" install "$pkg" || warn "pip failed for: $pkg (skipping)"
    done < <(sed -E 's/[[:space:]]+#.*$//' "$req_fixed")
  }

  log "[apple-bleee] installing CLI wrappers (venv python)"
  _mk_wrapper() {
    local name="$1" script="$2"
    with_sudo install -Dm755 /dev/stdin "/usr/local/bin/$name" <<EOF
#!/usr/bin/env bash
exec "$venv/bin/python" "$share_dir/$script" "\$@"
EOF
  }
  quiet_run _mk_wrapper ble-read-state  "ble_read_state.py"
  quiet_run _mk_wrapper airdrop-leak    "airdrop_leak.py"
  quiet_run _mk_wrapper adv-wifi        "adv_wifi.py"
  quiet_run _mk_wrapper adv-airpods     "adv_airpods.py"

  log "[apple-bleee] installed wrappers + venv (patched Python sources)"
}

install_apple_bleee() { # args: <src>
  log "[apple-bleee] install handled during build; skipping"
}
# =========================
# Entry
# =========================
if [[ ${#RECIPES[@]} -eq 0 ]]; then
  run_recipe 0trace
  run_recipe amap
  run_recipe apache-users
  run_recipe apktool
  run_recipe apple_bleee
else
  for r in "${RECIPES[@]}"; do
    run_recipe "$r"
  done
fi
